// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "PAppResponse.pb.h"
// @@protoc_insertion_point(imports)

@implementation PappResponseRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PappResponseRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PAppResponse ()
@property (strong) NSString* msg;
@property (strong) NSString* sessionId;
@property SInt32 version;
@property SInt32 code;
@property SInt32 total;
@property (strong) NSMutableArray * dataArray;
@property (strong) NSMutableArray * errorsArray;
@end

@implementation PAppResponse

- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) _value_ {
  hasMsg_ = !!_value_;
}
@synthesize msg;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasTotal {
  return !!hasTotal_;
}
- (void) setHasTotal:(BOOL) _value_ {
  hasTotal_ = !!_value_;
}
@synthesize total;
@synthesize dataArray;
@dynamic data;
@synthesize errorsArray;
@dynamic errors;
- (instancetype) init {
  if ((self = [super init])) {
    self.msg = @"";
    self.sessionId = @"";
    self.version = 0;
    self.code = 0;
    self.total = 0;
  }
  return self;
}
static PAppResponse* defaultPAppResponseInstance = nil;
+ (void) initialize {
  if (self == [PAppResponse class]) {
    defaultPAppResponseInstance = [[PAppResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPAppResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultPAppResponseInstance;
}
- (NSArray *)data {
  return dataArray;
}
- (NSData*)dataAtIndex:(NSUInteger)index {
  return [dataArray objectAtIndex:index];
}
- (NSArray *)errors {
  return errorsArray;
}
- (NSString*)errorsAtIndex:(NSUInteger)index {
  return [errorsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMsg) {
    [output writeString:1 value:self.msg];
  }
  if (self.hasSessionId) {
    [output writeString:2 value:self.sessionId];
  }
  if (self.hasVersion) {
    [output writeInt32:3 value:self.version];
  }
  if (self.hasCode) {
    [output writeInt32:4 value:self.code];
  }
  if (self.hasTotal) {
    [output writeInt32:5 value:self.total];
  }
  [self.dataArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    [output writeData:6 value:element];
  }];
  [self.errorsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:7 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMsg) {
    size_ += computeStringSize(1, self.msg);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(2, self.sessionId);
  }
  if (self.hasVersion) {
    size_ += computeInt32Size(3, self.version);
  }
  if (self.hasCode) {
    size_ += computeInt32Size(4, self.code);
  }
  if (self.hasTotal) {
    size_ += computeInt32Size(5, self.total);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.dataArray.count;
    [self.dataArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeDataSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.errorsArray.count;
    [self.errorsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PAppResponse*) parseFromData:(NSData*) data {
  return (PAppResponse*)[[[PAppResponse builder] mergeFromData:data] build];
}
+ (PAppResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PAppResponse*)[[[PAppResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PAppResponse*) parseFromInputStream:(NSInputStream*) input {
  return (PAppResponse*)[[[PAppResponse builder] mergeFromInputStream:input] build];
}
+ (PAppResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PAppResponse*)[[[PAppResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PAppResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PAppResponse*)[[[PAppResponse builder] mergeFromCodedInputStream:input] build];
}
+ (PAppResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PAppResponse*)[[[PAppResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PAppResponseBuilder*) builder {
  return [[PAppResponseBuilder alloc] init];
}
+ (PAppResponseBuilder*) builderWithPrototype:(PAppResponse*) prototype {
  return [[PAppResponse builder] mergeFrom:prototype];
}
- (PAppResponseBuilder*) builder {
  return [PAppResponse builder];
}
- (PAppResponseBuilder*) toBuilder {
  return [PAppResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInteger:self.version]];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", [NSNumber numberWithInteger:self.code]];
  }
  if (self.hasTotal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"total", [NSNumber numberWithInteger:self.total]];
  }
  [self.dataArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", obj];
  }];
  [self.errorsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errors", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMsg) {
    [dictionary setObject: self.msg forKey: @"msg"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  if (self.hasVersion) {
    [dictionary setObject: [NSNumber numberWithInteger:self.version] forKey: @"version"];
  }
  if (self.hasCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.code] forKey: @"code"];
  }
  if (self.hasTotal) {
    [dictionary setObject: [NSNumber numberWithInteger:self.total] forKey: @"total"];
  }
  [dictionary setObject:self.data forKey: @"data"];
  [dictionary setObject:self.errors forKey: @"errors"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PAppResponse class]]) {
    return NO;
  }
  PAppResponse *otherMessage = other;
  return
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      self.hasTotal == otherMessage.hasTotal &&
      (!self.hasTotal || self.total == otherMessage.total) &&
      [self.dataArray isEqualToArray:otherMessage.dataArray] &&
      [self.errorsArray isEqualToArray:otherMessage.errorsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.version] hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.code] hash];
  }
  if (self.hasTotal) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.total] hash];
  }
  [self.dataArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.errorsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PAppResponseBuilder()
@property (strong) PAppResponse* resultPappResponse;
@end

@implementation PAppResponseBuilder
@synthesize resultPappResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPappResponse = [[PAppResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPappResponse;
}
- (PAppResponseBuilder*) clear {
  self.resultPappResponse = [[PAppResponse alloc] init];
  return self;
}
- (PAppResponseBuilder*) clone {
  return [PAppResponse builderWithPrototype:resultPappResponse];
}
- (PAppResponse*) defaultInstance {
  return [PAppResponse defaultInstance];
}
- (PAppResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PAppResponse*) buildPartial {
  PAppResponse* returnMe = resultPappResponse;
  self.resultPappResponse = nil;
  return returnMe;
}
- (PAppResponseBuilder*) mergeFrom:(PAppResponse*) other {
  if (other == [PAppResponse defaultInstance]) {
    return self;
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasTotal) {
    [self setTotal:other.total];
  }
  if (other.dataArray.count > 0) {
    if (resultPappResponse.dataArray == nil) {
      resultPappResponse.dataArray = [[NSMutableArray alloc] initWithArray:other.dataArray];
    } else {
      [resultPappResponse.dataArray addObjectsFromArray:other.dataArray];
    }
  }
  if (other.errorsArray.count > 0) {
    if (resultPappResponse.errorsArray == nil) {
      resultPappResponse.errorsArray = [[NSMutableArray alloc] initWithArray:other.errorsArray];
    } else {
      [resultPappResponse.errorsArray addObjectsFromArray:other.errorsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PAppResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PAppResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMsg:[input readString]];
        break;
      }
      case 18: {
        [self setSessionId:[input readString]];
        break;
      }
      case 24: {
        [self setVersion:[input readInt32]];
        break;
      }
      case 32: {
        [self setCode:[input readInt32]];
        break;
      }
      case 40: {
        [self setTotal:[input readInt32]];
        break;
      }
      case 50: {
        [self addData:[input readData]];
        break;
      }
      case 58: {
        [self addErrors:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasMsg {
  return resultPappResponse.hasMsg;
}
- (NSString*) msg {
  return resultPappResponse.msg;
}
- (PAppResponseBuilder*) setMsg:(NSString*) value {
  resultPappResponse.hasMsg = YES;
  resultPappResponse.msg = value;
  return self;
}
- (PAppResponseBuilder*) clearMsg {
  resultPappResponse.hasMsg = NO;
  resultPappResponse.msg = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultPappResponse.hasSessionId;
}
- (NSString*) sessionId {
  return resultPappResponse.sessionId;
}
- (PAppResponseBuilder*) setSessionId:(NSString*) value {
  resultPappResponse.hasSessionId = YES;
  resultPappResponse.sessionId = value;
  return self;
}
- (PAppResponseBuilder*) clearSessionId {
  resultPappResponse.hasSessionId = NO;
  resultPappResponse.sessionId = @"";
  return self;
}
- (BOOL) hasVersion {
  return resultPappResponse.hasVersion;
}
- (SInt32) version {
  return resultPappResponse.version;
}
- (PAppResponseBuilder*) setVersion:(SInt32) value {
  resultPappResponse.hasVersion = YES;
  resultPappResponse.version = value;
  return self;
}
- (PAppResponseBuilder*) clearVersion {
  resultPappResponse.hasVersion = NO;
  resultPappResponse.version = 0;
  return self;
}
- (BOOL) hasCode {
  return resultPappResponse.hasCode;
}
- (SInt32) code {
  return resultPappResponse.code;
}
- (PAppResponseBuilder*) setCode:(SInt32) value {
  resultPappResponse.hasCode = YES;
  resultPappResponse.code = value;
  return self;
}
- (PAppResponseBuilder*) clearCode {
  resultPappResponse.hasCode = NO;
  resultPappResponse.code = 0;
  return self;
}
- (BOOL) hasTotal {
  return resultPappResponse.hasTotal;
}
- (SInt32) total {
  return resultPappResponse.total;
}
- (PAppResponseBuilder*) setTotal:(SInt32) value {
  resultPappResponse.hasTotal = YES;
  resultPappResponse.total = value;
  return self;
}
- (PAppResponseBuilder*) clearTotal {
  resultPappResponse.hasTotal = NO;
  resultPappResponse.total = 0;
  return self;
}
- (NSMutableArray *)data {
  return resultPappResponse.dataArray;
}
- (NSData*)dataAtIndex:(NSUInteger)index {
  return [resultPappResponse dataAtIndex:index];
}
- (PAppResponseBuilder *)addData:(NSData*)value {
  if (resultPappResponse.dataArray == nil) {
    resultPappResponse.dataArray = [[NSMutableArray alloc]init];
  }
  [resultPappResponse.dataArray addObject:value];
  return self;
}
- (PAppResponseBuilder *)setDataArray:(NSArray *)array {
  resultPappResponse.dataArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PAppResponseBuilder *)clearData {
  resultPappResponse.dataArray = nil;
  return self;
}
- (NSMutableArray *)errors {
  return resultPappResponse.errorsArray;
}
- (NSString*)errorsAtIndex:(NSUInteger)index {
  return [resultPappResponse errorsAtIndex:index];
}
- (PAppResponseBuilder *)addErrors:(NSString*)value {
  if (resultPappResponse.errorsArray == nil) {
    resultPappResponse.errorsArray = [[NSMutableArray alloc]init];
  }
  [resultPappResponse.errorsArray addObject:value];
  return self;
}
- (PAppResponseBuilder *)setErrorsArray:(NSArray *)array {
  resultPappResponse.errorsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PAppResponseBuilder *)clearErrors {
  resultPappResponse.errorsArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
